diff --git a/src/main/java/frc/robot/OI.java b/src/main/java/frc/robot/OI.java
index a4bb4b9..737c811 100644
--- a/src/main/java/frc/robot/OI.java
+++ b/src/main/java/frc/robot/OI.java
@@ -10,6 +10,7 @@ package frc.robot;
 import edu.wpi.first.wpilibj.Joystick;
 import edu.wpi.first.wpilibj.buttons.Button;
 import edu.wpi.first.wpilibj.buttons.JoystickButton;
+import frc.robot.commands.HookHatch;
 import frc.robot.commands.ReleasingTheHatchPanel;
 
 
@@ -23,10 +24,12 @@ public class OI {
   public Joystick djoy = new Joystick(RobotMap.djoy);
   public Joystick ojoy = new Joystick(RobotMap.ojoy);
   public JoystickButton RBojoy = new JoystickButton(ojoy, RobotMap.ojoyRB);
+  public JoystickButton LBojoy = new JoystickButton(ojoy, RobotMap.ojoyLB);
 
   public OI(){
     RBojoy.whenPressed(new ReleasingTheHatchPanel());
-  }
+    LBojoy.whenPressed(new HookHatch());
+  }  
   
   
   
diff --git a/src/main/java/frc/robot/Robot.java b/src/main/java/frc/robot/Robot.java
index f645eb1..2a68dce 100644
--- a/src/main/java/frc/robot/Robot.java
+++ b/src/main/java/frc/robot/Robot.java
@@ -9,7 +9,6 @@ package frc.robot;
 
 import edu.wpi.first.wpilibj.TimedRobot;
 import edu.wpi.first.wpilibj.command.Command;
-import frc.robot.commands.SetControl;
 import edu.wpi.first.wpilibj.command.Scheduler;
 import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
 import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
@@ -35,6 +34,7 @@ import frc.robot.echo.Recorder;
 
 
 
+
 /**
  * The VM is configured to automatically run this class, and to call the
  * functions corresponding to each mode, as described in the TimedRobot
@@ -96,7 +96,7 @@ public class Robot extends TimedRobot {
     ae =  new ArmExtension();
     arm = new Arm();
     w = new Wrist();
-    cs = new ControlSystem();
+    cs= new ControlSystem();
     vs = new Vision();
     m_oi = new OI();
 
@@ -211,10 +211,10 @@ public class Robot extends TimedRobot {
 			Wrist.setSpeed(w.wristMotor, recorder.getReading("Wrist"));
       Intake.setSpeed(in.intakeMotor, recorder.getReading("Intake Ball"));
       Intake.setSpeed(in.intakeMotor, recorder.getReading("Eject Ball"));
-      Intake.setPosition(in.hatchPush, recorder.getReading("Push Hatch"));
-      Intake.setPosition(in.hatchPush, recorder.getReading("Release Hatch"));
-      //Intake.setServo(in.hook, recorder.getReading("Hook Hatch"));
-      //Intake.setServo(in.hook, recorder.getReading("Unhook Hatch"));
+      Intake.setPosition(in.hatchPushSolenoid, recorder.getReading("Push Hatch"));
+      Intake.setPosition(in.hatchPushSolenoid, recorder.getReading("Release Hatch"));
+      Intake.setServo(in.hookServo, recorder.getReading("Hook Hatch"));
+      Intake.setServo(in.hookServo, recorder.getReading("Unhook Hatch"));
       Arm.setSpeed(arm.armMotorL, recorder.getReading("Move Arm Left"));
       Arm.setSpeed(arm.armMotorR, recorder.getReading("Move Arm Right"));
       ArmExtension.setPosition(ae.armExtender, recorder.getReading("Arm is extended"));
@@ -231,10 +231,10 @@ public class Robot extends TimedRobot {
 			Wrist.setSpeed(w.wristMotor, 0);
       Intake.setSpeed(in.intakeMotor, 0);
       Intake.setSpeed(in.intakeMotor, 0);
-      Intake.setPosition(in.hatchPush, 0);
-      Intake.setPosition(in.hatchPush, 0);
-      //Intake.setServo(in.hook, 0);
-      //Intake.setServo(in.hook, 0);
+      Intake.setPosition(in.hatchPushSolenoid, 0);
+      Intake.setPosition(in.hatchPushSolenoid, 0);
+      Intake.setServo(in.hookServo, 0);
+      Intake.setServo(in.hookServo, 0);
       Arm.setSpeed(arm.armMotorL,0);
       Arm.setSpeed(arm.armMotorR, 0);
       ArmExtension.setPosition(ae.armExtender, 0);
@@ -290,9 +290,6 @@ public class Robot extends TimedRobot {
 
     SmartDashboard.putNumber("arm conversion: ", Robot.w.armConversion);
 
-
-
-    SmartDashboard.putNumber("mode: ", SetControl.mode);
     SmartDashboard.putNumber("PID a: ", Robot.arm.PID);
     SmartDashboard.putNumber("Angle a: ", Robot.arm.angle*180/Math.PI);
     SmartDashboard.putNumber("Error a", Robot.arm.error);
@@ -300,7 +297,8 @@ public class Robot extends TimedRobot {
     SmartDashboard.putNumber("Conversion a", Robot.arm.conversion);
     SmartDashboard.putNumber("Flat a", Robot.arm.flat);
     SmartDashboard.putNumber("P value a", Robot.arm.P);
-    SmartDashboard.putNumber("Posititi", Robot.in.hook.getPosition());   
+    SmartDashboard.putNumber("Posititi", Robot.in.hookServo.getPosition());   
+    
     if(Recorder.isRecording)
 		{
 			recorder.addReading("DriveTrain Back Left", -Robot.m_oi.djoy.getRawAxis(1));
@@ -312,28 +310,20 @@ public class Robot extends TimedRobot {
 			recorder.addReading("Wrist", Robot.m_oi.ojoy.getRawAxis(1));
       recorder.addReading("Intake Ball", Robot.m_oi.ojoy.getRawAxis(2));
       recorder.addReading("Eject Ball", Robot.m_oi.ojoy.getRawAxis(3));
-      recorder.addReading("Push Hatch", ArmExtension.convertBoolToDouble()); //boolToDouble is static in ArmExtension, it was intiailly
+      recorder.addReading("Push Hatch", Robot.m_oi.djoy.getRawAxis(5)); //boolToDouble is static in ArmExtension, it was intiailly
       recorder.addReading("Release Hatch", ArmExtension.convertBoolToDouble()); //Robot.in.convertBoolToDouble but that wasn't where it was
       recorder.addReading("Hook Hatch", ArmExtension.convertBoolToDouble()); //if this doesn't work then that is why
       recorder.addReading("Unhook Hatch", ArmExtension.convertBoolToDouble());
       recorder.addReading("Move Arm Left", -Robot.m_oi.ojoy.getRawAxis(5));
       recorder.addReading("Move Arm Right", Robot.m_oi.ojoy.getRawAxis(5));
-      recorder.addReading("Arm is extended", Robot.ae.convertBoolToDouble());
-      recorder.addReading("Arm is retracted", Robot.ae.convertBoolToDouble());
+      recorder.addReading("Arm is extended", ArmExtension.convertBoolToDouble());
+      recorder.addReading("Arm is retracted", ArmExtension.convertBoolToDouble());
 			System.out.println(recorder.initNextReading());
 		}
 		
 		else if (Recorder.isStoring()) {
 			recorder.storeWritings();
 		}
-    /*if(m_oi.djoy.getRawButtonPressed(3) && (int)getV() == 1){ //will only run when the button is first pressed
-      if(getX() < 0){
-        initiallyOnLeft  = true;
-      }
-      else if(getX() >= 0){ //dont know how to handle if x is 0
-        initiallyOnLeft = false;
-      }
-    }*/
    if(m_oi.ojoy.getRawButton(2)){
      drivetrain.moveBackward();
    }
diff --git a/src/main/java/frc/robot/RobotMap.java b/src/main/java/frc/robot/RobotMap.java
index 3878040..3843996 100644
--- a/src/main/java/frc/robot/RobotMap.java
+++ b/src/main/java/frc/robot/RobotMap.java
@@ -26,15 +26,14 @@ public class RobotMap {
   public static int armMotorR = 4;
   public static int intakeMotor = 3;
   public static int wristMotor = 5;
-  public static int hookServo = 1;
-  
+  public static int hookServo = 8;
   public static int djoy = 0;
   public static int ojoy = 1;
 
-  public static int extensionSolenoid1 = 7;
-  public static int extensionSolenoid2 = 5;
-  public static int hatchPush1 = 4;
-  public static int hatchPush2 = 6;
+  public static int extensionSolenoid1 = 4;
+  public static int extensionSolenoid2 = 6;
+  public static int hatchPush1 = 7;
+  public static int hatchPush2 = 5;
 
   public static int ojoyA = 1;
   public static int ojoyB = 2;
@@ -42,13 +41,11 @@ public class RobotMap {
   public static int ojoyY = 4;
   public static int ojoyLB = 5;
   public static int ojoyRB = 6;
-  public static int ojoyBack = 7;
-  public static int ojoyStart = 8;
-  public static int ojoyRY = 5;
-  public static int ojoyLY = 1;
+  public static int ojoyStart = 7;
+  public static int ojoyBack = 8;
 
-  public static int potA = 0;
-  public static int potW = 1;
+  public static int potA = 1;
+  public static int potW = 2;
 
   // If you are using multiple modules, make sure to define both the port
   // number and the module. For example you with a rangefinder:
diff --git a/src/main/java/frc/robot/subsystems/Intake.java b/src/main/java/frc/robot/subsystems/Intake.java
index 29d0e52..e3fcc58 100644
--- a/src/main/java/frc/robot/subsystems/Intake.java
+++ b/src/main/java/frc/robot/subsystems/Intake.java
@@ -65,10 +65,8 @@ public void release(){
 
 
 public void hookHatchPanel(){
-  if (Robot.m_oi.ojoy.getRawButton(RobotMap.ojoyLB)){
     hookServo.setPosition(1);
 }
-}
 public void unhookHatchPanel(){
   hookServo.setPosition(0);
 }
@@ -97,6 +95,8 @@ public static void setServo(Servo servo, double position){
     servo.setPosition(0);
   }
 }
+
+
   // Put methods for controlling this subsystem
   // here. Call these from Commands.
 
